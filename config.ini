# Configuration file for B-SOiD use. Alter values as needed.
# If you decide to change a key name, make sure that the string name reference in bsoid/config.py is also changed.

[PATH]
# OUTPUT_PATH: leave blank to use default path within B-SOID project directory
OUTPUT_PATH =

OST_BASE_PROJECT_PATH =


[APP]
OUTPUT_MODEL_NAME = DEFAULT_MODEL_NAME__CHANGE_ME
VIDEO_FRAME_RATE = 60
# COMP (type:int):  COMP=0 is one classifier/CSV file; COMP=1 is one classifier for all CSV files
COMPILE_CSVS_FOR_TRAINING = 1


[MODEL]
# RANDOM_STATE: Leave random_state value blank for using an actually random seed value
RANDOM_STATE = 42
HOLDOUT_TEST_PCT = 0.20
CROSS_VALIDATION_K = 10


[LOGGING]
### Name, format, and create log levels for the logger
### Valid log levels are limited to: CRITICAL, FATAL, ERROR, WARN, WARNING, INFO, DEBUG, NOTSET
LOGGER_NAME = default_logger
LOG_FILE_NAME = default.log
LOG_FORMAT = %(asctime)s - %(name)s - %(levelname)-8s - %(message)s
STREAM_LOG_LEVEL = DEBUG
FILE_LOG_LEVEL = WARNING
# LOG_FILE_FOLDER_PATH: Leave LOG_FILE_FOLDER_PATH blank to use the default pathing. Otherwise,
#    fill value with an ABSOLUTE to the folder where log will be kept
LOG_FILE_FOLDER_PATH =


######################################
### Classifier-specific parameters ###

[EM/GMM]
n_components = 30
# covariance_type: # t-sne structure means nothing.
covariance_type = full
tol = 0.001
reg_covar = 1e-06
# init_params: random initialization
init_params = random
max_iter = 100
# # 20 iterations to escape poor initialization
n_init = 20
# verbose: set this to 0 if you don't want to show progress for em-gmm.
verbose = 1


[HDBSCAN]
min_samples = 10


[MLP]
# activation: logistics appears to outperform tanh and relu
activation = logistic
hidden_layer_sizes = (100, 10)
solver = adam
learning_rate = constant
learning_rate_init = 0.001
# alpha: # regularization default is better than higher values.
alpha = 0.0001
max_iter = 1000
early_stopping = False
# verbose: set verbose=1 for tuning feedforward neural network
verbose = 0


[SVM]
C = 10
gamma = 0.5
probability = True
random_state = 0
verbose = 0

[UMAP]
n_components = 3
# min_dist: small value
min_dist = 0.0

[TSNE]
# 3 is good, 2 will not create unique pockets, 4 will screw GMM up (curse of dimensionality)
n_components = 3
# n_jobs: n_jobs=-1: all cores being used, set to -2 for all cores but one.
n_jobs = -2
# verbose: verbose=2 shows check points
verbose = 2

